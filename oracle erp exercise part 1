				Chapter 1
1.	Initiate an iSQL*Plus session using the user ID and password provided by the instructor.
Ans 		
2.	iSQL*Plus commands access the database.
Answer:		false 
3.	The following SELECT statement executes successfully:
      SELECT last_name, job_id, salary AS Sal
      FROM   employees;
Answer:		true
4.	The following SELECT statement executes successfully:
      
      SELECT * 
      FROM   job_grades;
Answer:		false
5.	There are four coding errors in this statement. Can you identify them? 
      SELECT    employee_id, last_name
      sal x 12  ANNUAL SALARY
      FROM      employees;
 Answer:	(1:  ,   2:  * 3 :ANNUAL SALARY  4: sal)

6.	Show the structure of the DEPARTMENTS table. Select all data from the table
Answer 1:	 Describe departments
Answer  2:	 select *        from departments;


7.	Show the structure of the EMPLOYEES table. Create a query to display the last name, job code, hire date, and employee number for each employee, with employee number appearing first. Provide an alias STARTDATE for the HIRE_DATE column. Save your SQL statement to a file named lab1_7.sql.
Answer 1:	 Describe employees
8.	Run your query in the file lab1_7.sql
Answer 2:	select last_name,job_id,hire_date"startdate",employee_id       from employees;


9.	Create a query to display unique job codes from the EMPLOYEES table.
Answer :	Select distinct(job_id)      From employees;




10.	Copy the statement from lab1_7.sql into the iSQL*Plus Edit window. Name the column headings Emp #, Employee, Job, and Hire Date, respectively. Run your query again.
Answer :	select employee_id"#emp",last_name"employee",job_id"job",hire_date"hire date" 
from employees;

11.	Display the last name concatenated with the job ID, separated by a comma and space, and name the column Employee and Title.
Answer :	select last_name||', '||job_id "employees and title                                                                          from employees;

12.	Create a query to display all the data from the EMPLOYEES table. Separate each column by a comma. Name the column THE_OUTPUT.
Answer :	select employee_id||','||first_name||','||last_name||','||email||','||phone_number||','||job_id||','||hire_date||','||salary||','||department_id     AS "the_output"                                                                                                                               FROM EMPLOYEE;




                                          Chapter 2

1.	Create a query to display the last name and salary of employees earning more than $12,000.
	Place your SQL statement in a text file named lab2_1.sql. Run your query.

Answer  :	select last_name,salary
from employees
where salary>12000;

2.	Create a query to display the employee last name and department number for employee number 176.

Answer  :	select last_name , department_id 
from employees
where employee_id=176;

3.	Modify lab2_1.sql to display the last name and salary for all employees 
whose salary is not in the range of $5,000 and $12,000. Place your SQL statement in a text file named lab2_3.sq

Answer  :	select last_name,salary
from employees
where salary not between 5000 and 12000;

4.	Display the employee last name, job ID, and start date of employees hired 
between February 20, 1998, and May 1, 1998. Order the query in ascending order by start date.

Answer  :	select last_name,job_id,hire_date
from employees
where hire_date between '20-feb-98' and '1-MAY-98';

5.	Display the last name and department number of all employees in departments 20 and 50 in alphabetical order by name.

Answer  : 	select last_name ,department_id
from  employees
where department_id IN (20 ,50);


6.	Modify lab2_3.sql to list the last name and salary of employees 
who earn between $5,000 and $12,000, and are in department 20 or 50. Label the columns Employee and Monthly Salary, respectively.
Resave lab2_3.sql as lab2_6.sql. Run the statement in lab2_6.sql.	

Answer  : 	select last_name "Employee",salary "Monthly Salary"
from employees
where salary between 5000 and 12000
and department_id in (20,50);

7.	Display the last name and hire date of every employee who was hired in 1994.

Answer  :	select last_name,hire_date
from employees
where hire_date ='07-june-94';

8.	Display the last name and job title of all employees who do not have a manager.

Answer  :	select last_name ,job_id
from employees
where job_id not like 'IT_PROG';	

9.	Display the last name, salary, and commission for all employees who earn commissions. Sort
	data in descending order of salary and commissions

Answer  :	select last_name,salary,commission_pct
from employees
order by commission_pct asc;

10.	Display the last names of all employees where the third letter of the name is an a.

Answer  :	select last_name
from employees
where last_name like '__a%';

11.	Display the last name of all employees who have an a and an e in their last name
Answer  :	select last_name 
from employees
where last_name like '_a%'
and last_name like '_____e%';

12.	Display the last name, job, and salary for all employees whose job is
sales representative or stock clerk and whose salary is not equal to $2,500, $3,500, or $7,000

Answer  :	 select last_name,job_id,salary
from employees
where job_id IN('ST_CLERK','SA_REP')
AND SALARY  not in('2500','3500','7000');

13.	Modify lab2_6.sql to display the last name, salary, and commission for all employees 
whose commission amount is 20%. Resave lab2_6.sql as lab2_13.sql. Rerun the statement in lab2_13.sql.

Answer  :	select last_name "Employee",salary "Monthly Salary",commission_pct
from employees
where salary between 5000 and 12000
and department_id in (20,50)
OR Commission_pct  in ('0.2');




                        Chapter 3 - Part One
1.	Write a query to display the current date. Label the column Date

Answer  : 	select  SYSDATE  from DUAL;

2.	For each employee, display the employee number, last_name, salary, and salary
increased by 15% and expressed as a whole number. Label the column New Salary. Place your SQL statement in a text file named lab3_2.sql.

Answer  :	select employee_id,last_name,salary,round(salary*1.15) "New Salary"
from employees;

3.	Run your query in the file lab3_2.sql.        
Answer  : 	select *    from employees;

4.	Modify your query lab3_2.sql to add a column that subtracts the old salary from
	the new salary. Label the column Increase. Save the contents of the file as lab3_4.sql. Run the revised query.

Answer  :	select employee_id,last_name,salary,round(salary*1.15)"New Salary",(salary*1.15)-salary"increase"
from employees;
Chapter 3, Part One: Overview (continued) 
5.	Write a query that displays the employee’s last names with the first letter capitalized and all other letters lowercase, and the length of the names, for all employees whose name starts with J, A, or M. Give each column an appropriate label. Sort the results by the employees’ last names.
        Answer  :	select initcap(last_name)"Name",length(last_name)
from employees
where last_name LIKE 'M%'
OR LAST_NAME LIKE 'A%';
Practice 3 - Part Two 
6.	For each employee, display the employee’s last name, and calculate the number of months between today and the date the employee was hired.
Label the column MONTHS_WORKED. Order your results by the number of months employed. Round the number of months up to the closest whole number.
	Note: Your results will differ.
Answer  :	SELECT last_name,round(months_between(Sysdate,hire_date)/12)"Month work"
from employees;

7.	Write a query that produces the following for each employee:
	<employee last name> earns <salary> monthly but wants <3 times salary>. Label the column Dream Salaries.
Answer  SELECT last_name||' earn '|| salary ||' monthly but wants '||salary*3
from employees;

8.	Create a query to display the last name and salary for all employees. Format the salary to be 15
	characters long, left-padded with $. Label the column SALARY.
  
 Answer : SELECT lpad(salary,15,'$') SALARY
FROM   employees;

				Chapter 3 - Part Two (continued)

9.	Display each employee’s last name, hire date, and salary review date, which is the first Monday after six months of service.
Label the column REVIEW. Format the dates to appear in the format similar to “Monday, the Thirty-First of July, 2000.”

Answer  :	select last_name, hire_date,TO_CHAR(next_day(add_month(hire_date, 6), 'monday'),'fmday, Month DDth, YYYY')
	from employees;

10. Display the last name, hire date, and day of the week on which the employee started. Label
	the column DAY. Order the results by the day of the week starting with Monday.
Answer  :	select last_name , hire_date,to_char(hire_date,'DAY') DAy
from  employees
order by to_char(hire_date-1,'d');

11. 	Create a query that displays the employees’ last names and commission amounts.
If an employee does not earn commission, put “No Commission.” Label the column COMM.

Answer  :	select last_name,NVL(to_char(commission_pct),'no commission')comm
from employees;

12. 	Create a query that displays the employees’ last names and indicates the amounts of their annual salaries with asterisks.
Each asterisk signifies a thousand dollars. Sort the data in descending order of salary. Label the column EMPLOYEES_AND_THEIR_SALARIES.

Answer  :SELECT rpad(last_name, 8)||' '|| rpad(' ', salary/1000+1, '*')
EMPLOYEES_AND_THEIR_SALARIES
FROM employees
ORDER BY salary DESC;

13.Using the DECODE function, write a query that displays the grade of all employees based on the value of the column JOB_ID, as per the following data:
	Job				Grade	
	AD_PRES			A	
	ST_MAN			B	
	IT_PROG			C	
	SA_REP			D	
	ST_CLERK			E	
	None of the above		0	

Answer: SELECT job_id, decode (job_id,'ST_CLERK', 'E','SA_REP', 'D','IT_PROG', 'C','ST_MAN', 'B','AD_PRES', 'A','0')GRADE
FROM employees;




                                          Chapter 4 - Part One 

1. 	Write a query to display the last name, department number, and department name for all employees. 

Answer:		select e.last_name,e.department_id,d.department_name
		from employees e, departments d
		where e.department_id=d.department_id

2.	Create a unique listing of all jobs that are in department 80. Include the location of the department in the output.

Answer:	select distinct(e.job_id),l.location_id
from employees e, departments d
where e.department_id=d.department_id
and d.department_id=8

3. 	Write a query to display the employee last name, department name, location ID, and city of all employees who earn a commission.

Answer:	select e.last_name,d.department_name,l.location_id,l.city
from employees e,departments d,locations l
where e.department_id=d.department_id
and d.location_id=l.location_id
and e.commission_pct is not null;


4.	Display the employee last name and department name for all employees who have an a (lowercase) in their last names. 
Place your SQL statement in a text file named lab4_4.sql.

Answer:	select e.last_name,d.department_name
from employees e,departments d
where e.last_name like '___a%';

5.	Write a query to display the last name, job, department number, and department name for all
	employees who work in Toronto.

Answer:	SELECT e.last_name,e.job_id,e.department_id,d.department_name
FROM   employees e, departments d,locations l
WHERE  city like'%Toronto%'  ;

6.	Display the employee last name and employee number along with their manager’s last name and 	manager number.
Label the columns Employee, Emp#, Manager, and Mgr#, respectively.
Place your SQL statement in a text file named lab4_6.sql.

Answer:	SELECT worker.last_name"Employee",worker.employee_id"EMP#", manager.last_name"Manager",manager.employee_id"Mgr#"
FROM   employees worker, employees manager
WHERE  worker.manager_id = manager.employee_id

7.	Modify lab4_6.sql to display all employees including King, who has no manager. Order the results by the employee number.
Place your SQL statement in a text file named lab4_7.sql. Run the query in lab4_7.sql

Answer:	SELECT worker.last_name"Employee",worker.employee_id"EMP#", manager.last_name"Manager",manager.employee_id"Mgr#"
FROM   employees worker, employees manager
WHERE  worker.manager_id (+)= manager.employee_id ;





                                    Chapter 5

Determine the validity of the following three statements. Circle either True or False.
1.	Group functions work across many rows to produce one result per group.

Answer:	True
2.	Group functions include nulls in calculations.

Answer:	False

3.	The WHERE clause restricts rows prior to inclusion in a group calculation.

Answer:	True

4.	Display the highest, lowest, sum, and average salary of all employees. Label the columns
	Maximum, Minimum, Sum, and Average, respectively. Round your results to the nearest whole 	number.
  Place your SQL statement in a text file named lab5_4.sql

Answer:	 select MAX(SALARY)"Maximum",MIN(SALARY)"Minimun",SUM(SALARY)"SUM",AVG(SALARY)"Average"
from employees;

5.	Modify the query in lab5_4.sql to display the minimum, maximum, sum, and average salary for each job type. 	Resave lab5_4.sql to lab5_5.sql.
Run the statement in lab5_5.sql.

Answer: 	select job_id,MAX(SALARY)"Maximum",MIN(SALARY)"Minimun",SUM(SALARY)"SUM",AVG(SALARY)"Average"
from employees
group by job_id;

6.	Write a query to display the number of people with the same job.
Answer:	select job_id,count(*)
from employees
group by job_id;

7.	Determine the number of managers without listing them. Label the column Number of
	Managers. Hint: Use the MANAGER_ID column to determine the number of managers.

Answer: 	select manager_id "number of managers",COUNT(*)
FROM EMPLOYEES
GROUP BY manager_id;

8.	Write a query that displays the difference between the highest and lowest salaries. Label the column DIFFERENCE.

Answer: 	 select  max(salary)-min(salary)
FROM EMPLOYEES;

9.	Display the manager number and the salary of the lowest paid employee for that manager.
	Exclude anyone whose manager is not known. Exclude any groups where the minimum
	salary is $6,000 or less. Sort the output in descending order of salary.

Answer:	select manager_id , max(salary)
FROM EMPLOYEES
group by manager_id 
having min(salary)<=6000;


10.	Write a query to display each department’s name, location, number of employees, and the average salary for all employees in that 
department. Label the columns Name, Location, 
Number of People, and Salary, respectively. Round the average salary to two decimal places.

Answer: SELECT d.department_name "Name", d.location_id "Location ",
COUNT(*) "Number of People",
ROUND(AVG(salary),2) "Salary"
FROM employees e, departments d
WHERE e.department_id = d.department_id
GROUP BY d.department_name, d.location_id;


11.	Create a query that will display the total number of employees and, of that total, 
the number of 	employees hired in 1995, 1996, 1997, and 1998. Create appropriate column headings.

Answer: ELECT COUNT(*) total,
SUM(DECODE(TO_CHAR(hire_date, 'YYYY'),1995,1,0))"1 995",SUM(DECODE(TO_CHAR(hire_date, 'YYYY'),1996,1,0))"1 996",
SUM(DECODE(TO_CHAR(hire_date, 'YYYY'),1997,1,0))"1 997",SUM(DECODE(TO_CHAR(hire_date, 'YYYY'),1998,1,0))"1 998"
FROM employees;

12.	Create a matrix query to display the job, the salary for that job based on department number,
and the total salary for that job, for departments 20, 50, 80, and 90, giving each column an 		appropriate heading.

Answer:  SELECT job_id "Job",
SUM(DECODE(department_id , 20, salary)) "Dept 20" ,SUM(DECODE(department_id , 50, salary)) "Dept 50" ,SUM(DECODE(department_id , 80, salary)) "Dept 80" ,
SUM(DECODE(department_id , 90, salary)) "Dept 90" ,SUM(salary) "Total"
FROM employees
GROUP BY job_id;
 	
 				Chapter 6
 
 1. Write a query to display the last name and hire date of any employee in the same
department as Zlotkey. Exclude Zlotkey.

Answer: SELECT last_name, hire_date
FROM employees
WHERE department_id = (SELECT department_id
FROM employees
WHERE last_name = 'Zlotkey')
AND last_nae <> 'Zlotkey';

2. Create a query to display the employee numbers and last names of all employees who earn more than 
the average salary. Sort the results in descending order of salary.

Answer: SELECT employee_id, last_name
FROM employees
WHERE salary > (SELECT AVG(salary)
FROM employees);
3. Write a query that displays the employee numbers and last names of all employees who work in a
department with any employee whose last name contains a u. Place your SQL statement in a text 
file named lab6_3.sql. Run your query.

Answer:	SELECT employee_id, last_name
FROM employees
WHERE department_id IN (SELECT department_id
FROM employees
WHERE last_name like '%u%');

4. Display the last name, department number, and job ID of all employees whose department location ID is 1700.

Answer: ELECT last_name, department_id, job_id
FROM employees
WHERE department_id IN (SELECT department_id
FROM departments
WHERE location_id = 1700);

5. Display the last name and salary of every employee who reports to King.

Answer:SELECT last_name, salary
FROM employees
WHERE manager_id = (SELECT employee_id
FROM employees
WHERE last_name = 'King');

6. Display the department number, last name, and job ID for every employee in the Executive 
department.

Answer:SELECT department_id, last_name, job_id
FROM employees
WHERE department_id IN (SELECT department_id
FROM departments
WHERE department_name = 'Executive');

7. Modify the query in lab6_3.sql to display the employee numbers, last names, and salaries of all
employees who earn more than the average salary and who work in a department with any employee 
with a u in their name. Resave lab6_3.sql to lab6_7.sql. Run the statement in 
lab6_7.sql.
Answer:SELECT employee_id, last_name, salary
FROM employees
WHERE department_id IN (SELECT department_id
FROM employees
WHERE last_name like '%u%')
AND salary > (SELECT AVG(salary)
FROM employees);
				
				Chapter 7
Determine whether the following statements are true or false:
1. The following statement is correct:
DEFINE & p_val = 100

Answer: fasle

2. The DEFINE command is a SQL command.
Answer: false

3. Write a script file to display the employee last name, job, and hire date for all employees who
started between a given range. Concatenate the name and job together, separated by a space
and comma, and label the column Employees. Use the DEFINE command to provide the two 
ranges. Use the format MM/DD/YYYY. Save the script file as lab7_3.sql.

Answer:	SET ECHO OFF
SET VERIFY OFF
DEFINE low_date = 01/01/1998
DEFINE high_date = 01/01/1999
SELECT last_name ||', '|| job_id EMPLOYEES, hire_date
FROM employees
WHERE hire_date BETWEEN TO_DATE('&low_date', 'MM/DD/YYYY')
AND TO_DATE('&high_date', 'MM/DD/YYYY')
/
UNDEFINE low_date
UNDEFINE high_date
SET VERIFY ON
SET ECHO ON

4. Write a script to display the employee last name, job, and department name for a given location. The
search condition should allow for case-insensitive searches of the department location. Save the 
script file as lab7_4.sql.

Answer:	SET ECHO OFF
SET VERIFY OFF
COLUMN last_name HEADING "EMPLOYEE NAME"
COLUMN department_name HEADING "DEPARTMENT NAME”
SELECT e.last_name, e.job_id, d.department_name
FROM employees e, departments d, locations l
WHERE e.department_id = d.department_id
AND l.location_id = d.location_id
AND l.city = INITCAP('&p_location')
/
COLUMN last_name CLEAR
COLUMN department_name CLEAR
SET VERIFY ON
SET ECHO ON

5. Modify the code in lab7_4.sql to create a report containing the department name, employee last
name, hire date, salary, and each employee’s annual salary for all employees in a given location. 
Label the columns DEPARTMENT NAME, EMPLOYEE NAME, START DATE, SALARY, and 
ANNUAL SALARY, placing the labels on multiple lines. Resave the script as lab7_5.sql and
execute the commands in the script.

Answer:SET ECHO OFF
SET FEEDBACK OFF
SET VERIFY OFF
BREAK ON department_name
COLUMN department_name HEADING "DEPARTMENT|NAME"
COLUMN last_name HEADING "EMPLOYEE|NAME"
COLUMN hire_date HEADING "START|DATE"
COLUMN salary HEADING "SALARY" FORMAT $99,990.00
COLUMN asal HEADING "ANNUAL|SALARY" FORMAT $99,990.00
SELECT d.department_name, e.last_name, e.hire_date,
e.salary, e.salary*12 asal
FROM departments d, employees e, locations l
WHERE e.department_id = d.department_id 
AND d.location_id = l.location_id
AND l.city = '&p_location'
ORDER BY d.department_name
/
COLUMN department_name CLEAR
COLUMN last_name CLEAR
COLUMN hire_date CLEAR
COLUMN salary CLEAR 	
COLUMN asal CLEAR
CLEAR BREAK
SET VERIFY ON
SET FEEDBACK ON
SET ECHO ON

				chapter 8
Insert data into the MY_EMPLOYEE table.

1. Run the statement in the lab8_1.sql script to build the MY_EMPLOYEE table that will be used for 
the lab.

Answer:	CREATE TABLE my_employee
(id NUMBER(4) CONSTRAINT my_employee_id_ nn NOT NULL,
last_name VARCHAR2(25),
first_name VARCHAR2(25),
userid VARCHAR2(8),
salary NUMBER(9,2));

2. Describe the structure of the MY_EMPLOYEE table to identify the column names.

Answer:	DESCRIBE my_employee

3. Add the first row of data to the MY_EMPLOYEE table from the following sample data. Do not list the 
columns in the INSERT clause.

Answer:	INSERT INTO my_employee
VALUES (1, 'Patel', 'Ralph', 'rpatel', 895);

4. Populate the MY_EMPLOYEE table with the second row of sample data from the preceding list. This 
time, list the columns explicitly in the INSERT clause.

Answer:	INSERT INTO my_employee (id, last_name, first_name,
userid, salary)
VALUES (2, 'Dancs', 'Betty', 'bdancs', 860);

5. Confirm your addition to the table.

Answer:	SELECT *
FROM my_employee;

6. Write an insert statement in a text file named loademp.sql to load rows into the 
MY_EMPLOYEE table. Concatenate the first letter of the first name and the first seven characters of 
the last name to produce the userid.
SET ECHO OFF
SET VERIFY OFF
INSERT INTO my_employee
VALUES (&p_id, '&p_last_name', '&p_first_name',
lower(substr('&p_first_name', 1, 1) ||
substr('&p_last_name', 1, 7)), &p_salary);
SET VERIFY ON
SET ECHO ON
7. Populate the table with the next two rows of sample data by running the insert statement in the 
script that you created.

Answer:SET ECHO OFF
SET VERIFY OFF
INSERT INTO my_employee
VALUES (&p_id, '&p_last_name', '&p_first_name',
lower(substr('&p_first_name', 1, 1) ||
substr('&p_last_name', 1, 7)), &p_salary);
SET VERIFY ON
SET ECHO ON

8. Confirm your additions to the table.

Answer:	SELECT *
FROM my_employee;

9. Make the data additions permanent.

Answer: COMMIT;

10. Change the last name of employee 3 to Drexler.

Answer: UPDATE my_employee
SET last_name = 'Drexler'
WHERE id = 3;

11. Change the salary to 1000 for all employees with a salary less than 900.

Answer: UPDATE my_employee
SET salary = 1000
WHERE salary < 900;

12. Verify your changes to the table./

Answer: SELECT last_name, salary
FROM my_employee;

13. Delete Betty Dancs from the MY_EMPLOYEE table.

Answer: DELETE
FROM my_employee
WHERE last_name = 'Dancs';

14. Confirm your changes to the table.

Answer: SELECT *
FROM my_employee;

15. Commit all pending changes.

Answer: COMMIT;

16. Populate the table with the last row of sample data by modifying the statements in the script that you 
created in step 6. Run the statements in the script.

Answer: SET ECHO OFF
SET VERIFY OFF
INSERT INTO my_employee
VALUES (&p_id, '&p_last_name', '&p_first_name',
lower(substr('&p_first_name', 1, 1) ||
substr('&p_last_name', 1, 7)), &p_salary);
SET VERIFY ON
SET ECHO ON

17. Confirm your addition to the table.

Answer: SELECT *
FROM my_employee;

18. Mark an intermediate point in the processing of the transaction.
 
Answer: SAVEPOINT step_18;

19. Empty the entire table.

Answer: DELETE
FROM my_employee;

20. Confirm that the table is empty.
Answer: SELECT *
FROM my_employee;

21. Discard the most recent DELETE operation without discarding the earlier INSERT operation.

Answer: ROLLBACK TO step_18;

22. Confirm that the new row is still intact.

Answer: SELECT *
FROM my_employee;
23. Make the data addition permanent.
COMMIT;


							Chapter 9 


1. Create the DEPT table based on the following table instance chart. Place the syntax in a script called 
lab9_1.sql, then execute the statement in the script to create the table. Confirm that the table is 
created.


Column Name  		ID	 	NAME
Key Type
Nulls/Unique
FK Table
FK Column
Data type	       Number 		VARCHAR2
Length 			7		  25

Answer: CREATE TABLE dept
(id NUMBER(7),
name VARCHAR2(25));
DESCRIBE dept

2. Populate the DEPT table with data from the DEPARTMENTS table. Include only columns that
you need.

Answer: INSERT INTO dept
SELECT department_id, department_name
FROM departments;

3. Create the EMP table based on the following table instance chart. Place the syntax in a script called 
lab9_3.sql, and then execute the statement in the script to create the table. Confirm that the table is 
created.

Column Name 		ID 		LAST_NAME 		FIRST_NAME 		DEPT_ID
Key Type
Nulls/Unique
FK Table
FK Column
Data type	      Number 	        VARCHAR2 		VARCHAR2 		Number
Length 			7 		 25 	 		  25			  7


Answer:	CREATE TABLE emp
(id NUMBER(7),last_name VARCHAR2(25),first_name VARCHAR2(25),dept_id NUMBER(7));
DESCRIBE emp

4. Modify the EMP table to allow for longer employee last names. Confirm your modification.

Answer:ALTER TABLE emp
MODIFY (last_name VARCHAR2(50));
DESCRIBE emp

5. Confirm that both the DEPT and EMP tables are stored in the data dictionary. (Hint:USER_TABLES)

Answer:	SELECT table_name
FROM user_tables
WHERE table_name IN ('DEPT', 'EMP');

6. Create the EMPLOYEES2 table based on the structure of the EMPLOYEES table. Include only the 
EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY, and DEPARTMENT_ID columns. Name 
the columns in your new table ID, FIRST_NAME, LAST_NAME, SALARY , and DEPT_ID,
respectively.

Answer:	CREATE TABLE employees2 AS
SELECT employee_id id, first_name, last_name, salary,
department_id dept_id
FROM employees;

7. Drop the EMP table.

Answer:	DROP TABLE emp;

8. Rename the EMPLOYEES2 table to EMP.

Answer:	RENAME employees2 TO emp;
Introduction to Oracle9i: SQL A-30

9. Add a comment to the DEPT and EMP table definitions describing the tables. Confirm your additions
in the data dictionary.

Answer:	COMMENT ON TABLE emp IS 'Employee Information';
COMMENT ON TABLE dept IS 'Department Information';
SELECT *
FROM user_tab_comments
WHERE table_name = 'DEPT'
OR table_name = 'EMP';

10. Drop the FIRST_NAME column from the EMP table. Confirm your modification by checking the 
description of the table.

Answer:	ALTER TABLE emp
DROP COLUMN FIRST_NAME;

DESCRIBE emp

11. In the EMP table, mark the DEPT_ID column in the EMP table as UNUSED. Confirm your 
modification by checking the description of the table.

Answer:	ALTER TABLE emp
SET UNUSED (dept_id);
DESCRIBE emp

12. Drop all the UNUSED columns from the EMP table. Confirm your modification by checking the 
description of the table.

Answer:	ALTER TABLE emp
DROP UNUSED COLUMNS;
DESCRIBE emp

						Chapter 10   
1. Add a table-level PRIMARY KEY constraint to the EMP table on the ID column. The constraint 
should be named at creation. Name the constraint my_emp_id_pk

Answer:	ALTER TABLE emp
ADD CONSTRAINT my_emp_id_pk PRIMARY KEY (id);

2. Create a PRIMARY KEY constraint to the DEPT table using the ID column. The constraint should 
be named at creation. Name the constraint my_deptid_pk.

Answer:	ALTER TABLE dept
ADD CONSTRAINT my_deptid_pk PRIMARY KEY(id);

3. Add a column DEPT_ID to the EMP table. Add a foreign key reference on the EMP table that 
ensures that the employee is not assigned to a nonexistent department. Name the constraint 
my_emp_dept_id_fk.

Answer:	ALTER TABLE emp
ADD (dept_id NUMBER(7));
ALTER TABLE emp
ADD CONSTRAINT my_emp_dept_id_fk
FOREIGN KEY (dept_id) REFERENCES dept(id);

4. Confirm that the constraints were added by querying the USER_CONSTRAINTS view. Note the 
types and names of the constraints. Save your statement text in a file called lab10_4.sql.

Answer:	SELECT constraint_name, constraint_type
FROM user_constraints
WHERE table_name IN ('EMP', 'DEPT');

5. Display the object names and types from the USER_OBJECTS data dictionary view for the EMP
and DEPT tables. Notice that the new tables and a new index were created.

Answer:	SELECT object_name, object_type
FROM user_objects
WHERE object_name LIKE 'EMP%'
OR object_name LIKE 'DEPT%';

6. Modify the EMP table. Add a COMMISSION column of NUMBER data type, precision 2, scale 2. 
Add a constraint to the commission column that ensures that a commission value is greater than 
zero.

Answer:	ALTER TABLE EMP
ADD commission NUMBER(2,2)
CONSTRAINT my_emp_comm_ck CHECK (commission >= 0;
	
	
							Chapter 11
						
1. Create a view called EMPLOYEES_VU based on the employee numbers, employee names, and
department numbers from the EMPLOYEES table. Change the heading for the employee name to
EMPLOYEE.

Answer:	CREATE OR REPLACE VIEW employees_vu AS
SELECT employee_id, last_name employee, department_id
FROM employees;

2. Display the contents of the EMPLOYEES_VU view.

Answer:	SELECT *
FROM employees_vu;

3. Select the view name and text from the USER_VIEWS data dictionary view.
Note: Another view already exists. The EMP_DETAILS_VIEW was created as part of your schema.
Note: To see more contents of a LONG column, use the iSQL*Plus command SET LONG n, where 
n is the value of the number of characters of the LONG column that you want to see.

Answer:	SET LONG 600
SELECT view_name, text
FROM user_views;

4. Using your EMPLOYEES_VU view, enter a query to display all employee names and department
numbers.

Answer:	SELECT employee, department_id
FROM employees_vu;

5. Create a view named DEPT50 that contains the employee numbers, employee last names, and
department numbers for all employees in department 50. Label the view columns
EMPNO, EMPLOYEE, and DEPTNO. Do not allow an employee to be reassigned to another 
department through the view.

Answer:	CREATE VIEW dept50 AS
SELECT employee_id empno, last_name employee,
department_id deptno
FROM employees
WHERE department_id = 50
WITH CHECK OPTION CONSTRAINT emp_dept_50;


6. Display the structure and contents of the DEPT50 view.

Answer:	DESCRIBE dept50
SELECT *
FROM dept50;

7. Attempt to reassign Matos to department 80. 

Answer:	UPDATE dept50
SET deptno = 80
WHERE employee = 'Matos';

8. Create a view called SALARY_VU based on the employee last names, department names, salaries, 
and salary grades for all employees. Use the EMPLOYEES, DEPARTMENTS, and JOB_GRADES
tables. Label the columns Employee, Department, Salary, and Grade, respectively.

Answer:	CREATE OR REPLACE VIEW salary_vu  AS
SELECT e.last_name "Employee",d.department_name "Department",e.salary "Salary",j.grade_level "Grades"
FROM employees e,departments d,job_grades j
WHERE e.department_id = d.department_id
AND e.salary BETWEEN j.lowest_sal and j.highest_sal;
	
								Chapter 12

1. Create a sequence to be used with the primary key column of the DEPT table. The sequence should 
start at 200 and have a maximum value of 1000. Have your sequence increment by ten numbers. 
Name the sequence DEPT_ID_SEQ.

Answer:	CREATE SEQUENCE dept_id_seq
START WITH 200
INCREMENT BY 10
MAXVALUE 1000;

2. Write a query in a script to display the following information about your sequences: sequence name, 
maximum value, increment size, and last number. Name the script lab12_2.sql. Run the 
statement in your script. 

Answer:	SELECT sequence_name, max_value, increment_by, last_number
FROM user_sequences;

3. Write a script to insert two rows into the DEPT table. Name your script lab12_3.sql.
Be sure to use the sequence that you created for the ID column. Add two departments named 
Education and Administration. Confirm your additions. Run the commands in your script.

Answer:	INSERT INTO dept
VALUES (dept_id_seq.nextval, 'Education');
INSERT INTO dept
VALUES (dept_id_seq.nextval, 'Administration');

4. Create a nonunique index on the foreign key column (DEPT_ID) in the EMP table.

Answer:	CREATE INDEX emp_dept_id_idx ON emp (dept_id);

5. Display the indexes and uniqueness that exist in the data dictionary for the EMP table. Save the 
statement into a script named lab12_5.sql.

Answer:	SELECT index_name, table_name, uniqueness
FROM user_indexes
WHERE table_name = 'EMP';


							chapter 13 

1. What privilege should a user be given to log on to the Oracle Server? Is this a system or an object 
privilege?

Answer:	The CREATE SESSION system privilege

2. What privilege should a user be given to create tables?

Answer:	The CREATE TABLE privilege

3. If you create a table, who can pass along privileges to other users on your table?

Answer: You can, or anyone you have given those privileges to by using the WITH GRANT 
OPTION.

4. You are the DBA. You are creating many users who require the same system privileges.
What should you use to make your job easier?

Answer:	Create a role containing the system privileges and grant the role to the users

5. What command do you use to change your password?

Answer:	The ALTER USER statement

6. Grant another user access to your DEPARTMENTS table. Have the user grant you query access to his 
or her DEPARTMENTS table.

Answer:
Team 2 executes the GRANT statement.
GRANT select
ON departments
TO <user1>;
Team 1 executes the GRANT statement.
GRANT select
ON departments
TO <user2>;

7. Query all the rows in your DEPARTMENTS table.

Answer:	SELECT *
FROM departments;

8. Add a new row to your DEPARTMENTS table. Team 1 should add Education as department
number 500. Team 2 should add Human Resources department number 510. Query the other team’s
table.

Answer:
Team 1 executes this INSERT statement.
INSERT INTO departments(department_id, department_name)
VALUES (200, 'Education');
COMMIT;
Team 2 executes this INSERT statement.
INSERT INTO departments(department_id, department_name)
VALUES (210, 'Administration');
COMMIT;

9. Create a synonym for the other team’s DEPARTMENTS table.

Answer:
Team 1 creates a synonym named team2.
CREATE SYNONYM team2
FOR <user2>.DEPARTMENTS;
Team 2 creates a synonym named team1.
CREATE SYNONYM team1
FOR <user1>. DEPARTMENTS;

10. Query all the rows in the other team’s DEPARTMENTS table by using your synonym.
Team 1 executes this SELECT statement.

Answer:	SELECT *
FROM team2;
Team 2 executes this SELECT statement.
SELECT *
FROM team1;

11. Query the USER_TABLES data dictionary to see information about the tables that you own.

Answer:	SELECT table_name
FROM user_tables;

12. Query the ALL_TABLES data dictionary view to see information about all the tables that you
can access. Exclude tables that you own.

Answer:	SELECT table_name, owner
FROM all_tables
WHERE owner <> <your account>;

13. Revoke the SELECT privilege from the other team.
Team 1 revokes the privilege.

Answer:REVOKE select
ON departments
FROM user2;
Team 2 revokes the privilege.
REVOKE select
ON departments 
FROM user1;


					
							chapter 15 

1. List the department IDs for departments that do not contain the job ID ST_CLERK, using SET
operators.

Answer :SELECT department_id
FROM departments
MINUS
SELECT department_id
FROM employees
WHERE job_id = 'ST_CLERK';

2. Display the country ID and the name of the countries that have no departments located in them, 
using SET operators.

Answer : SELECT country_id,country_name
FROM countries
MINUS
SELECT l.country_id,c.country_name
FROM locations l, countries c
WHERE l.country_id = c.country_id;

3. Produce a list of jobs for departments 10, 50, and 20, in that order. Display job ID and 
department ID, using SET operators.
COLUMN dummy PRINT

Answer : SELECT job_id, department_id, 'x' dummy
FROM employees
WHERE department_id = 10
UNION
SELECT job_id, department_id, 'y' 
FROM employees
WHERE department_id = 50
UNION
SELECT job_id, department_id, 'z' 
FROM employees
WHERE department_id = 20
ORDER BY 3;
COLUMN dummy NOPRINT

4. List the employee IDs and job IDs of those employees, who are currently in the job title that they 
have held once before during their tenure with the company.

Answer : SELECT employee_id,job_id
FROM employees
INTERSECT
SELECT employee_id,job_id
FROM job_history;

5. Write a compond query that lists the following :
• Last names and department ID of all the employees from the EMPLOYEES table, irrespective 
of whether they belong to any department
• Department ID and department name of all the departments from the DEPARTMENTS table,
irrespective of whether they have employees working in them

Answer : SELECT last_name,department_id,TO_CHAR(null)
FROM employees
UNION
SELECT TO_CHAR(null),department_id,department_name
FROM departments;
				

				
						Chapter 16 

1. Alter the session to set the NLS_DATE_FORMAT to DD-MON-YYYY HH24:MI:SS.

Answer : ALTER SESSION SET NLS_DATE_FORMAT = 
'DD-MON-YYYY HH24:MI:SS';

2. a. Write queries to display the time zone offsets (TZ_OFFSET) for the following time zones.
US/Pacific-New

Answer : SELECT TZ_OFFSET ('US/Pacific-New') from dual;
Singapore
SELECT TZ_OFFSET ('Singapore') from dual;
Egypt
SELECT TZ_OFFSET ('Egypt') from dual;

b. Alter the session to set the TIME_ZONE parameter value to the time zone offset of 
US/Pacific-New.

Answer : ALTER SESSION SET TIME_ZONE = '-8:00';

c. Display the CURRENT_DATE, CURRENT_TIMESTAMP, and LOCALTIMESTAMP for this 
session.

Answer : SELECT CURRENT_DATE, CURRENT_TIMESTAMP, LOCALTIMESTAMP
FROM DUAL; 

d. Alter the session to set the TIME_ZONE parameter value to the time zone offset of 
Singapore.

Answer : ALTER SESSION SET TIME_ZONE = '+8:00';

e. Display the CURRENT_DATE, CURRENT_TIMESTAMP, LOCALTIMESTAMP for this 
session.

Answer : SELECT CURRENT_DATE, CURRENT_TIMESTAMP, LOCALTIMESTAMP
FROM DUAL;

3. Write a query to display the DBTIMEZONE and SESSIONTIMEZONE.

Answer :SELECT DBTIMEZONE,SESSIONTIMEZONE
FROM DUAL;

4. Write a query to extract the YEAR from HIRE_DATE column of the EMPLOYEES table for those 
employees who work in department 80.

Answer : SELECT last_name, EXTRACT (YEAR FROM HIRE_DATE)
FROM employees
WHERE department_id = 80;
					

					Chapter 17
1. Write a query to display the following for those employees 
whose manager ID is less than 120: 
.Manager ID
.Job ID and total salary for every job ID for employees who report to the same manager 
.Total salary of those managers
.Total salary of those managers, irrespective of the job IDs 

Answer :SELECT manager_id,job_id,sum(salary)
FROM employees
WHERE manager_id < 120
GROUP BY ROLLUP(manager_id,job_id);

2. Observe the output from question 1. Write a query using the GROUPING function to determine 
whether the NULL values in the columns corresponding to the GROUP BY expressions are caused by 
the ROLLUP operation.

Answer : SELECT manager_id MGR ,job_id JOB,
sum(salary),GROUPING(manager_id),GROUPING(job_id)
FROM employees
WHERE manager_id < 120
GROUP BY ROLLUP(manager_id,job_id);

3. Write a query to display the following for those employees whose manager ID is 
less than 120 :
– Manager ID
– Job and total salaries for every job for employees who report to the same manager
– Total salary of those managers
– Cross-tabulation values to display the total salary for every job, irrespective of the
manager
– Total salary irrespective of all job titles

Answer : SELECT manager_id, job_id, sum(salary)
FROM employees
WHERE manager_id < 120
GROUP BY CUBE(manager_id, job_id);

4. Observe the output from question 3. Write a query using the GROUPING function to determine
whether the NULL values in the columns corresponding to the GROUP BY expressions are
caused by the CUBE operation.

Answer : SELECT manager_id MGR ,job_id JOB,
sum(salary),GROUPING(manager_id),GROUPING(job_id)
FROM employees
WHERE manager_id < 120
GROUP BY CUBE(manager_id,job_id);

5. Using GROUPING SETS, write a query to display the following groupings : 
– department_id, manager_id, job_id
– department_id, job_id
– Manager_id, job_id
The query should calculate the sum of the salaries for each of these groups.

Answer : SELECT department_id, manager_id, job_id, SUM(salary)
FROM employees
GROUP BY 
GROUPING SETS ((department_id, manager_id, job_id),
(department_id, job_id),(manager_id,job_id));



					Chapter	18 


1. Write a query to display the last name, department number, and salary of any employee whose 
department number and salary both match the department number and salary of any employee who 
earns a commission.

Answer : SELECT last_name, department_id, salary
FROM employees
WHERE (salary, department_id) IN 
(SELECT salary, department_id
FROM employees
WHERE commission_pct IS NOT NULL);

2. Display the last name, department name, and salary of any employee whose salary and commission 
match the salary and commission of any employee located in location ID1700.

Answer : SELECT last_name, department_name, salary
FROM employees e, departments d
WHERE e.department_id = d.department_id
AND (salary, NVL(commission_pct,0)) IN 
(SELECT salary, NVL(commission_pct,0)
FROM employees e, departments d
WHERE e.department_id = d.department_id
AND d.location_id = 1700);

3. Create a query to display the last name, hire date, and salary for all employees who have the same 
salary and commission as Kochhar.

Answer :SELECT last_name, hire_date, salary
FROM employees
WHERE (salary, NVL(commission_pct,0)) IN 
(SELECT salary, NVL(commission_pct,0)
FROM employees
WHERE last_name = 'Kochhar')
AND last_name != 'Kochhar';

4. Create a query to display the employees who earn a salary that is higher than the salary of
all of the sales managers (JOB_ID = 'SA_MAN'). Sort the results on salary from highest to 
lowest.

Answer : SELECT last_name, job_id, salary
FROM employees
WHERE salary > ALL 
(SELECT salary
FROM employees
WHERE job_id = 'SA_MAN')
ORDER BY salary DESC;

5. Display the details of the employee ID, last name, and department ID of those employees who live 
in cities whose name begins with T.

Answer : SELECT employee_id, last_name, department_id
FROM employees
WHERE department_id IN (SELECT department_id
FROM departments
WHERE location_id IN
(SELECT location_id
FROM locations
WHERE city LIKE 'T%'));

6. Write a query to find all employees who earn more than the average salary in their departments.
Display last name, salary, department ID, and the average salary for the department. Sort by average 
salary. Use alises for the columns retrieved by the query as shown in the sample output.

Answer : SELECT e.last_name ename, e.salary salary, 
e.department_id deptno, AVG(a.salary) dept_ avg
FROM employees e, employees a
WHERE e.department_id = a.department_id
AND e.salary > (SELECT AVG(salary)
FROM employees
WHERE department_id = e.department_id )
GROUP BY e.last_name, e.salary, e.department_id
ORDER BY AVG(a.salary);


7. Find all employees who are not supervisors.

Answer : a. First do this by using the NOT EXISTS operator.
	SELECT outer.last_name
FROM employees outer
WHERE NOT EXISTS (SELECT 'X'
FROM employees inner
WHERE inner.manager_id = 
outer.employee_id);

Answer : b. Can this be done by using the NOT IN operator? How, or why not?
SELECT outer.last_name
FROM employees outer
WHERE outer.employee_id 
NOT IN (SELECT inner.manager_id
FROM employees inner);
This alternative solution is not a good one. The subquery picks up a NULL value, so the entire 
query returns no rows. The reason is that all conditions that compare a NULL value result in 
NULL. Whenever NULL values are likely to be part of the value set, do not use NOT IN as a 
substitute for NOT EXISTS.

8. Write a query to display the last names of the employees who earn less than the average salary in 
their departments.

Answer : SELECT last_name
FROM employees outer
WHERE outer.salary < (SELECT AVG(inner.salary)
FROM employees inner
WHERE inner.department_id 
= outer.department_id);

9. Write a query to display the last names who have one or more coworkers in their departments with 
later hire dates but higher salaries.

Answer : SELECT last_name
FROM employees outer
WHERE EXISTS (SELECT 'X'
FROM employees inner
WHERE inner.department_id = 
outer.department_id
AND inner.hire_date > outer.hire_date
AND inner.salary > outer.salary);

10. Write a query to display the employee ID, last names of the employees, and department names of all 
employees.

Answer : SELECT employee_id, last_name, 
(SELECT department_name
FROM departments d
WHERE e.department_id =
d.department_id ) department
FROM employees e
ORDER BY department;

11. Write a query to display the department names of those departments whose total salary cost is above 
one-eighth (1/8) of the total salary cost of the whole company. Use the WITH clause to write this 
query. Name the query SUMMARY.


Answer : 9SELECT department_name, SUM(salary) AS dept_total
FROM employees, departments
WHERE employees.department_id =
departments.department_id
GROUP BY department_name)
SELECT department_name, dept_total
FROM summary
WHERE dept_total > (
SELECT SUM(dept_total) * 1/8
FROM summary)
ORDER BY dept_total DESC;
